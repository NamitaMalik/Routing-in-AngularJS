{
  "name": "$routeParams in AngularJS",
  "tagline": "This blog explains $route params functionality in AngularJS.",
  "body": "# $routeParams in AngularJS\r\n\r\nSometimes we encounter a situation where we need **parameters** of a **URL**. This can be achieved basically in 2 ways:\r\n\r\n1. Using **$location** **service**\r\n2. Using **$routeParams** **service**\r\n\r\n**Using $location service**: We know that **$location** is a **service** in **AngularJS** which exposes the current **URL** in the address bar so that it can be observed or manipulated. Since **$location** exposes the **URL** therefore it is possible to extract the required **parameters** using **$location** **service**.\r\n\r\nWe can use **path()** method of **$location** **service** for this purpose. When ```path()``` **function** is called without passing any parameter to it, it returns path of current url.\r\n\r\nLet's have a look at the following piece of code :\r\n\r\n```JavaScript\r\nvar module = angular.module(\"myApp\", ['ngRoute']);\r\nmodule.config(['$routeProvider', function ($routeProvider) {\r\n    $routeProvider\r\n        .when('/route1/:param1/:param2', {\r\n            templateUrl: 'route1.html',\r\n            controller: 'RoutingController'\r\n        })\r\n        .when('/route2/:param1/:param2', {\r\n            templateUrl: 'route2.html',\r\n            controller: 'RoutingController'\r\n        })\r\n        .otherwise({\r\n            redirectTo: '/route1/default-book/default-page'\r\n        });\r\n}]);\r\nmodule.controller(\"RoutingController\", function ($scope, $routeParams, $location) {\r\n    // Using $location service\r\n    var url = $location.path().split('/');\r\n    $scope.firstParameter = url[2];\r\n    $scope.secondParameter = url[3];\r\n});\r\n```\r\n\r\nIn the above code, we have extracted the **URL** using ```$location.path()```. We have then split this path on the basis of separator ```/```. We know that ```split()``` method returns an array of strings, split using the separator (```/``` in this case) and this array has been stored in a variable named as ```url```.\r\n\r\nWe have then simply stored the **parameters** of **URL** in ```$scope.firstParameter``` and ```$scope.secondParameter``` variables.\r\n\r\nBut, this is not a good practice and perhaps an ugly way, since we have hardcoded the index in order to get the parameters. But one benefit of **$location** service is that it can be used even when **$routeProvider** is not used.\r\n\r\nThere is also one more way to extract **parameters**.\r\n\r\nNow, let's see that better solution:\r\n\r\n**Using $routeParams service**: **$routeParams** **service** allows us to retrieve **route parameters**.\r\n\r\nThe **$routeParams** is a combination of $location's ```search()``` and ```path()```. We can get the route path using the **path()** method of the **$location** **service** whereas ```search()``` method of **$location** **service** returns an object of search part/query string of the url. The path **parameters** are extracted when the **$route** path is matched(```when('/route1/:param1/:param2', {})```).\r\n\r\n> Note : routeParams will only work when ngRoute module is installed. It provides routing and deep linking services and directives for angular apps. Another important thing to note is that **$routeParam** will only work when **$routeProvider** is used.\r\n\r\nNow, let's see a working demo:\r\n\r\n```JavaScript\r\nvar module = angular.module(\"myApp\", ['ngRoute']);\r\nmodule.config(['$routeProvider', function ($routeProvider) {\r\n    $routeProvider\r\n        .when('/route1/:param1/:param2', {\r\n            templateUrl: 'route1.html',\r\n            controller: 'RoutingController'\r\n        })\r\n        .when('/route2/:param1/:param2', {\r\n            templateUrl: 'route2.html',\r\n            controller: 'RoutingController'\r\n        })\r\n        .otherwise({\r\n            redirectTo: '/route1/default-book/default-page'\r\n        });\r\n}]);\r\nmodule.controller(\"RoutingController\", function ($scope, $routeParams, $location) {\r\n    // Using $routeParams\r\n    $scope.param1 = $routeParams.param1;\r\n    $scope.param2 = $routeParams.param2;\r\n});\r\n```\r\n\r\nIn the above demo, we have injected **$routeParams** to our controller ```RoutingController``` and then we have simply done ```$routeParams.param1``` and ```$routeParams.param2``` to extract our first and second **parameters** respectively. **$routeParams** get updated only after a **route** change gets completed successfully.\r\n\r\n> NOTE: If there is a parameter name collision, path params take precedence over search params. Suppose if param1 parameter is present in query string as well. e.g. /route1/default-book/default-page?param1=23&authore=namita then resultant $routeParams object will be having three properties only: {param1: \"default-book\", author: \"namita\", param2: \"default-page\"}. param1 is having value 'default-book' instead of 23.\r\n\r\nI have collated both the ways in a single js(route.js) which looks like:\r\n\r\n```JavaScript\r\nvar module = angular.module(\"myApp\", ['ngRoute']);\r\nmodule.config(['$routeProvider', function ($routeProvider) {\r\n    $routeProvider\r\n        .when('/route1/:param1/:param2', {\r\n            templateUrl: 'route1.html',\r\n            controller: 'RoutingController'\r\n        })\r\n        .when('/route2/:param1/:param2', {\r\n            templateUrl: 'route2.html',\r\n            controller: 'RoutingController'\r\n        })\r\n        .otherwise({\r\n            redirectTo: '/route1/default-book/default-page'\r\n        });\r\n}]);\r\nmodule.controller(\"RoutingController\", function ($scope, $routeParams, $location) {\r\n    // Using $location service\r\n    var url = $location.path().split('/');\r\n    $scope.firstParameter = url[2];\r\n    $scope.secondParameter = url[3];\r\n    // Using $routeParams\r\n    $scope.param1 = $routeParams.param1;\r\n    $scope.param2 = $routeParams.param2;\r\n});\r\n```\r\n\r\nFor much clearer understanding, I have shown these **parameters** on our **HTML**. This is a small **HTML** code:\r\n\r\n```HTML\r\n<h1>Using $location Service</h1>\r\n<label>First Parameter: </label> {{firstParameter}} <br/> <br/>\r\n<label>Second Parameter: </label> {{secondParameter}} <br/> <br/>\r\n<hr/>\r\n<h1>Using $routeParams</h1>\r\n<label>First Parameter: </label>{{param1}} <br/> <br/>\r\n<label>Second Parameter</label> {{param2}}\r\n```\r\n\r\nIt is important to note that there are many ways of doing one thing, it all depends on the requirements of the project. :)\r\n\r\nFollow Me\r\n---\r\n[Github](https://github.com/NamitaMalik)\r\n\r\n[Twitter](https://twitter.com/namita13_04)\r\n\r\n[LinkedIn](https://in.linkedin.com/in/namita-malik-a7885b23)\r\n\r\n[More Blogs By Me](https://namitamalik.github.io/)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}